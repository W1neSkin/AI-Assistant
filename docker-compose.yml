services:
  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
      - "5678:5678"
    volumes:
      - ./backend:/app
    environment:
      - PYTHONPATH=/app
      - DEBUG_MODE=true
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_MODEL=${LLM_MODEL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - WEAVIATE_URL=http://weaviate:8080
    command: >
      uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - app-network
    depends_on:
      - postgres
      - redis
      - weaviate
      - ollama

  mcp-server:
    container_name: mcp-server
    build:
      context: ./backend/mcp_server
      dockerfile: Dockerfile
    # restart: always
    ports:
      - "8001:8001"
    volumes:
      - ./backend/mcp_server:/app
    environment:
      - PYTHONPATH=/app
      - DEBUG_MODE=true
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_MODEL=${LLM_MODEL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - WEAVIATE_URL=http://weaviate:8080
    networks:
      - app-network
    depends_on:
      - postgres
      - redis
      - weaviate
      - ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  weaviate:
    container_name: weaviate
    image: cr.weaviate.io/semitechnologies/weaviate:1.28.4    
    restart: on-failure:0
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      CLUSTER_HOSTNAME: 'node1'
      PERSISTENCE_LSM_ACCESS_STRATEGY: "roaring"
      DISK_USE_READONLY_PERCENTAGE: "95"
      GRPC_PORT: "50051"
    ports:
      - "8080:8080"
      - "50051:50051"
    volumes:
      - weaviate_data:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://weaviate:8080/v1/.well-known/ready"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 100m
    networks:
      - app-network

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    networks:
      - app-network

  redis:
    container_name: redis
    image: docker.io/library/redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256m
    networks:
      - app-network

  postgres:
    container_name: postgres
    image: postgres:16-alpine    
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dbuser} -d ${POSTGRES_DB:-customerdb}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  ollama:
    container_name: ollama
    build: ./docker/ollama    
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - LLM_LOCAL_MODEL=${LLM_LOCAL_MODEL}
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 18G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s

  # Add initialization container
  ollama-init:
    container_name: ollama-init
    image: curlimages/curl:latest    
    depends_on:
      ollama:
        condition: service_healthy
    command: >
      sh -c '
        curl -X POST http://ollama:11434/api/pull -d "{\"name\":\"${LLM_LOCAL_MODEL}\"}"
      '
    environment:
      - LLM_LOCAL_MODEL=${LLM_LOCAL_MODEL}
      - OLLAMA_HOST=ollama:11434
    networks:
      - app-network

volumes:
  weaviate_data:
  postgres_data:
  ollama_data:
  redis_data:

networks:
  app-network:
    driver: bridge
